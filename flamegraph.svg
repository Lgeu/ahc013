<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="2826"><g><title>std::shuffle&lt;signed char*, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (4 samples, 0.14%)</title><rect x="0.2477%" y="293" width="0.1415%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="4"/><text x="0.4977%" y="303.50"></text></g><g><title>std::__gen_two_uniform_ints&lt;unsigned long, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (4 samples, 0.14%)</title><rect x="0.2477%" y="277" width="0.1415%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="4"/><text x="0.4977%" y="287.50"></text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (4 samples, 0.14%)</title><rect x="0.2477%" y="261" width="0.1415%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="4"/><text x="0.4977%" y="271.50"></text></g><g><title>State&lt;5, 3&gt;::RandomUpdate (15 samples, 0.53%)</title><rect x="0.0000%" y="309" width="0.5308%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="15"/><text x="0.2500%" y="319.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (4 samples, 0.14%)</title><rect x="0.3892%" y="293" width="0.1415%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="4"/><text x="0.6392%" y="303.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (2 samples, 0.07%)</title><rect x="0.5308%" y="309" width="0.0708%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="2"/><text x="0.7808%" y="319.50"></text></g><g><title>[[stack]] (23 samples, 0.81%)</title><rect x="0.0000%" y="325" width="0.8139%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="23"/><text x="0.2500%" y="335.50"></text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (6 samples, 0.21%)</title><rect x="0.6016%" y="309" width="0.2123%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="6"/><text x="0.8516%" y="319.50"></text></g><g><title>Board&lt;Cell, 48, 48&gt;::operator[]&lt;signed char&gt; (11 samples, 0.39%)</title><rect x="47.4168%" y="261" width="0.3892%" height="15" fill="rgb(218,30,26)" fg:x="1340" fg:w="11"/><text x="47.6668%" y="271.50"></text></g><g><title>Board&lt;signed char, 48, 48&gt;::operator[]&lt;signed char&gt; (45 samples, 1.59%)</title><rect x="47.8061%" y="261" width="1.5924%" height="15" fill="rgb(220,122,19)" fg:x="1351" fg:w="45"/><text x="48.0561%" y="271.50"></text></g><g><title>UnionFind::size (15 samples, 0.53%)</title><rect x="49.3984%" y="261" width="0.5308%" height="15" fill="rgb(250,228,42)" fg:x="1396" fg:w="15"/><text x="49.6484%" y="271.50"></text></g><g><title>UnionFind::find (12 samples, 0.42%)</title><rect x="49.5046%" y="245" width="0.4246%" height="15" fill="rgb(240,193,28)" fg:x="1399" fg:w="12"/><text x="49.7546%" y="255.50"></text></g><g><title>UnionFind::find (5 samples, 0.18%)</title><rect x="49.7523%" y="229" width="0.1769%" height="15" fill="rgb(216,20,37)" fg:x="1406" fg:w="5"/><text x="50.0023%" y="239.50"></text></g><g><title>UnionFind::find (3 samples, 0.11%)</title><rect x="49.8231%" y="213" width="0.1062%" height="15" fill="rgb(206,188,39)" fg:x="1408" fg:w="3"/><text x="50.0731%" y="223.50"></text></g><g><title>Vec2&lt;signed char&gt;::Down (9 samples, 0.32%)</title><rect x="49.9292%" y="261" width="0.3185%" height="15" fill="rgb(217,207,13)" fg:x="1411" fg:w="9"/><text x="50.1792%" y="271.50"></text></g><g><title>Vec2&lt;signed char&gt;::Right (2 samples, 0.07%)</title><rect x="50.2477%" y="261" width="0.0708%" height="15" fill="rgb(231,73,38)" fg:x="1420" fg:w="2"/><text x="50.4977%" y="271.50"></text></g><g><title>chmax&lt;int, int&gt; (2 samples, 0.07%)</title><rect x="50.3185%" y="261" width="0.0708%" height="15" fill="rgb(225,20,46)" fg:x="1422" fg:w="2"/><text x="50.5685%" y="271.50"></text></g><g><title>BFS&lt;5, 3&gt;::Search (787 samples, 27.85%)</title><rect x="22.8238%" y="277" width="27.8485%" height="15" fill="rgb(210,31,41)" fg:x="645" fg:w="787"/><text x="23.0738%" y="287.50">BFS&lt;5, 3&gt;::Search</text></g><g><title>chmin&lt;signed char, int&gt; (8 samples, 0.28%)</title><rect x="50.3892%" y="261" width="0.2831%" height="15" fill="rgb(221,200,47)" fg:x="1424" fg:w="8"/><text x="50.6392%" y="271.50"></text></g><g><title>Board&lt;Cell, 48, 48&gt;::operator[]&lt;signed char&gt; (144 samples, 5.10%)</title><rect x="50.6723%" y="277" width="5.0955%" height="15" fill="rgb(226,26,5)" fg:x="1432" fg:w="144"/><text x="50.9223%" y="287.50">Board&lt;..</text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="261" width="0.1769%" height="15" fill="rgb(249,33,26)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="245" width="0.1769%" height="15" fill="rgb(235,183,28)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="229" width="0.1769%" height="15" fill="rgb(221,5,38)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="213" width="0.1769%" height="15" fill="rgb(247,18,42)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="197" width="0.1769%" height="15" fill="rgb(241,131,45)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="181" width="0.1769%" height="15" fill="rgb(249,31,29)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="165" width="0.1769%" height="15" fill="rgb(225,111,53)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="149" width="0.1769%" height="15" fill="rgb(238,160,17)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="55.5909%" y="133" width="0.1769%" height="15" fill="rgb(214,148,48)" fg:x="1571" fg:w="5"/><text x="55.8409%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.6263%" y="117" width="0.1415%" height="15" fill="rgb(232,36,49)" fg:x="1572" fg:w="4"/><text x="55.8763%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.6263%" y="101" width="0.1415%" height="15" fill="rgb(209,103,24)" fg:x="1572" fg:w="4"/><text x="55.8763%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.6263%" y="85" width="0.1415%" height="15" fill="rgb(229,88,8)" fg:x="1572" fg:w="4"/><text x="55.8763%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.6263%" y="69" width="0.1415%" height="15" fill="rgb(213,181,19)" fg:x="1572" fg:w="4"/><text x="55.8763%" y="79.50"></text></g><g><title>Move::Empty (117 samples, 4.14%)</title><rect x="55.7679%" y="277" width="4.1401%" height="15" fill="rgb(254,191,54)" fg:x="1576" fg:w="117"/><text x="56.0179%" y="287.50">Move:..</text></g><g><title>Move::Reset (3 samples, 0.11%)</title><rect x="59.9080%" y="277" width="0.1062%" height="15" fill="rgb(241,83,37)" fg:x="1693" fg:w="3"/><text x="60.1580%" y="287.50"></text></g><g><title>State&lt;5, 3&gt;::ApplyMove (121 samples, 4.28%)</title><rect x="60.0142%" y="277" width="4.2817%" height="15" fill="rgb(233,36,39)" fg:x="1696" fg:w="121"/><text x="60.2642%" y="287.50">State..</text></g><g><title>Board&lt;Cell, 48, 48&gt;::operator[]&lt;signed char&gt; (51 samples, 1.80%)</title><rect x="62.4912%" y="261" width="1.8047%" height="15" fill="rgb(226,3,54)" fg:x="1766" fg:w="51"/><text x="62.7412%" y="271.50">B..</text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="64.2604%" y="245" width="0.0354%" height="15" fill="rgb(245,192,40)" fg:x="1816" fg:w="1"/><text x="64.5104%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="64.2604%" y="229" width="0.0354%" height="15" fill="rgb(238,167,29)" fg:x="1816" fg:w="1"/><text x="64.5104%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="64.2604%" y="213" width="0.0354%" height="15" fill="rgb(232,182,51)" fg:x="1816" fg:w="1"/><text x="64.5104%" y="223.50"></text></g><g><title>Board&lt;Cell, 48, 48&gt;::operator[]&lt;signed char&gt; (40 samples, 1.42%)</title><rect x="72.3992%" y="261" width="1.4154%" height="15" fill="rgb(231,60,39)" fg:x="2046" fg:w="40"/><text x="72.6492%" y="271.50"></text></g><g><title>UnionFind::same (74 samples, 2.62%)</title><rect x="73.8146%" y="261" width="2.6185%" height="15" fill="rgb(208,69,12)" fg:x="2086" fg:w="74"/><text x="74.0646%" y="271.50">Un..</text></g><g><title>UnionFind::find (74 samples, 2.62%)</title><rect x="73.8146%" y="245" width="2.6185%" height="15" fill="rgb(235,93,37)" fg:x="2086" fg:w="74"/><text x="74.0646%" y="255.50">Un..</text></g><g><title>UnionFind::find (23 samples, 0.81%)</title><rect x="75.6192%" y="229" width="0.8139%" height="15" fill="rgb(213,116,39)" fg:x="2137" fg:w="23"/><text x="75.8692%" y="239.50"></text></g><g><title>UnionFind::find (3 samples, 0.11%)</title><rect x="76.3270%" y="213" width="0.1062%" height="15" fill="rgb(222,207,29)" fg:x="2157" fg:w="3"/><text x="76.5770%" y="223.50"></text></g><g><title>UnionFind::find (12 samples, 0.42%)</title><rect x="78.0609%" y="229" width="0.4246%" height="15" fill="rgb(206,96,30)" fg:x="2206" fg:w="12"/><text x="78.3109%" y="239.50"></text></g><g><title>UnionFind::size (63 samples, 2.23%)</title><rect x="76.4331%" y="261" width="2.2293%" height="15" fill="rgb(218,138,4)" fg:x="2160" fg:w="63"/><text x="76.6831%" y="271.50">U..</text></g><g><title>UnionFind::find (56 samples, 1.98%)</title><rect x="76.6808%" y="245" width="1.9816%" height="15" fill="rgb(250,191,14)" fg:x="2167" fg:w="56"/><text x="76.9308%" y="255.50">U..</text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="78.4855%" y="229" width="0.1769%" height="15" fill="rgb(239,60,40)" fg:x="2218" fg:w="5"/><text x="78.7355%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="78.4855%" y="213" width="0.1769%" height="15" fill="rgb(206,27,48)" fg:x="2218" fg:w="5"/><text x="78.7355%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="78.4855%" y="197" width="0.1769%" height="15" fill="rgb(225,35,8)" fg:x="2218" fg:w="5"/><text x="78.7355%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="78.4855%" y="181" width="0.1769%" height="15" fill="rgb(250,213,24)" fg:x="2218" fg:w="5"/><text x="78.7355%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="78.4855%" y="165" width="0.1769%" height="15" fill="rgb(247,123,22)" fg:x="2218" fg:w="5"/><text x="78.7355%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="78.5209%" y="149" width="0.1415%" height="15" fill="rgb(231,138,38)" fg:x="2219" fg:w="4"/><text x="78.7709%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="78.5209%" y="133" width="0.1415%" height="15" fill="rgb(231,145,46)" fg:x="2219" fg:w="4"/><text x="78.7709%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="78.5209%" y="117" width="0.1415%" height="15" fill="rgb(251,118,11)" fg:x="2219" fg:w="4"/><text x="78.7709%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="78.5209%" y="101" width="0.1415%" height="15" fill="rgb(217,147,25)" fg:x="2219" fg:w="4"/><text x="78.7709%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="78.5209%" y="85" width="0.1415%" height="15" fill="rgb(247,81,37)" fg:x="2219" fg:w="4"/><text x="78.7709%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="78.5209%" y="69" width="0.1415%" height="15" fill="rgb(209,12,38)" fg:x="2219" fg:w="4"/><text x="78.7709%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="78.5209%" y="53" width="0.1415%" height="15" fill="rgb(227,1,9)" fg:x="2219" fg:w="4"/><text x="78.7709%" y="63.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="78.5209%" y="37" width="0.1415%" height="15" fill="rgb(248,47,43)" fg:x="2219" fg:w="4"/><text x="78.7709%" y="47.50"></text></g><g><title>UnionFind::unite (60 samples, 2.12%)</title><rect x="78.6624%" y="261" width="2.1231%" height="15" fill="rgb(221,10,30)" fg:x="2223" fg:w="60"/><text x="78.9124%" y="271.50">U..</text></g><g><title>UnionFind::find (29 samples, 1.03%)</title><rect x="79.7594%" y="245" width="1.0262%" height="15" fill="rgb(210,229,1)" fg:x="2254" fg:w="29"/><text x="80.0094%" y="255.50"></text></g><g><title>UnionFind::find (1 samples, 0.04%)</title><rect x="80.7502%" y="229" width="0.0354%" height="15" fill="rgb(222,148,37)" fg:x="2282" fg:w="1"/><text x="81.0002%" y="239.50"></text></g><g><title>State&lt;5, 3&gt;::Connect (485 samples, 17.16%)</title><rect x="64.2958%" y="277" width="17.1621%" height="15" fill="rgb(234,67,33)" fg:x="1817" fg:w="485"/><text x="64.5458%" y="287.50">State&lt;5, 3&gt;::Connect</text></g><g><title>std::array&lt;UnionFind, 2ul&gt;::operator[] (19 samples, 0.67%)</title><rect x="80.7856%" y="261" width="0.6723%" height="15" fill="rgb(247,98,35)" fg:x="2283" fg:w="19"/><text x="81.0356%" y="271.50"></text></g><g><title>std::__array_traits&lt;UnionFind, 2ul&gt;::_S_ref (19 samples, 0.67%)</title><rect x="80.7856%" y="245" width="0.6723%" height="15" fill="rgb(247,138,52)" fg:x="2283" fg:w="19"/><text x="81.0356%" y="255.50"></text></g><g><title>State&lt;5, 3&gt;::Movable (49 samples, 1.73%)</title><rect x="81.4579%" y="277" width="1.7339%" height="15" fill="rgb(213,79,30)" fg:x="2302" fg:w="49"/><text x="81.7079%" y="287.50"></text></g><g><title>Board&lt;Cell, 48, 48&gt;::operator[]&lt;signed char&gt; (24 samples, 0.85%)</title><rect x="82.3425%" y="261" width="0.8493%" height="15" fill="rgb(246,177,23)" fg:x="2327" fg:w="24"/><text x="82.5925%" y="271.50"></text></g><g><title>[a.out] (1 samples, 0.04%)</title><rect x="83.1918%" y="261" width="0.0354%" height="15" fill="rgb(230,62,27)" fg:x="2351" fg:w="1"/><text x="83.4418%" y="271.50"></text></g><g><title>Time (15 samples, 0.53%)</title><rect x="83.1918%" y="277" width="0.5308%" height="15" fill="rgb(216,154,8)" fg:x="2351" fg:w="15"/><text x="83.4418%" y="287.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (14 samples, 0.50%)</title><rect x="83.2272%" y="261" width="0.4954%" height="15" fill="rgb(244,35,45)" fg:x="2352" fg:w="14"/><text x="83.4772%" y="271.50"></text></g><g><title>__clock_gettime_2 (13 samples, 0.46%)</title><rect x="83.2626%" y="245" width="0.4600%" height="15" fill="rgb(251,115,12)" fg:x="2353" fg:w="13"/><text x="83.5126%" y="255.50"></text></g><g><title>__vdso_clock_gettime (12 samples, 0.42%)</title><rect x="83.2979%" y="229" width="0.4246%" height="15" fill="rgb(240,54,50)" fg:x="2354" fg:w="12"/><text x="83.5479%" y="239.50"></text></g><g><title>UnionFind::same (60 samples, 2.12%)</title><rect x="83.7226%" y="277" width="2.1231%" height="15" fill="rgb(233,84,52)" fg:x="2366" fg:w="60"/><text x="83.9726%" y="287.50">U..</text></g><g><title>UnionFind::find (60 samples, 2.12%)</title><rect x="83.7226%" y="261" width="2.1231%" height="15" fill="rgb(207,117,47)" fg:x="2366" fg:w="60"/><text x="83.9726%" y="271.50">U..</text></g><g><title>UnionFind::find (42 samples, 1.49%)</title><rect x="84.3595%" y="245" width="1.4862%" height="15" fill="rgb(249,43,39)" fg:x="2384" fg:w="42"/><text x="84.6095%" y="255.50"></text></g><g><title>UnionFind::find (25 samples, 0.88%)</title><rect x="84.9611%" y="229" width="0.8846%" height="15" fill="rgb(209,38,44)" fg:x="2401" fg:w="25"/><text x="85.2111%" y="239.50"></text></g><g><title>UnionFind::find (6 samples, 0.21%)</title><rect x="85.6334%" y="213" width="0.2123%" height="15" fill="rgb(236,212,23)" fg:x="2420" fg:w="6"/><text x="85.8834%" y="223.50"></text></g><g><title>UnionFind::size (38 samples, 1.34%)</title><rect x="85.8457%" y="277" width="1.3447%" height="15" fill="rgb(242,79,21)" fg:x="2426" fg:w="38"/><text x="86.0957%" y="287.50"></text></g><g><title>UnionFind::find (38 samples, 1.34%)</title><rect x="85.8457%" y="261" width="1.3447%" height="15" fill="rgb(211,96,35)" fg:x="2426" fg:w="38"/><text x="86.0957%" y="271.50"></text></g><g><title>UnionFind::find (38 samples, 1.34%)</title><rect x="85.8457%" y="245" width="1.3447%" height="15" fill="rgb(253,215,40)" fg:x="2426" fg:w="38"/><text x="86.0957%" y="255.50"></text></g><g><title>UnionFind::find (38 samples, 1.34%)</title><rect x="85.8457%" y="229" width="1.3447%" height="15" fill="rgb(211,81,21)" fg:x="2426" fg:w="38"/><text x="86.0957%" y="239.50"></text></g><g><title>UnionFind::find (38 samples, 1.34%)</title><rect x="85.8457%" y="213" width="1.3447%" height="15" fill="rgb(208,190,38)" fg:x="2426" fg:w="38"/><text x="86.0957%" y="223.50"></text></g><g><title>UnionFind::find (38 samples, 1.34%)</title><rect x="85.8457%" y="197" width="1.3447%" height="15" fill="rgb(235,213,38)" fg:x="2426" fg:w="38"/><text x="86.0957%" y="207.50"></text></g><g><title>UnionFind::find (38 samples, 1.34%)</title><rect x="85.8457%" y="181" width="1.3447%" height="15" fill="rgb(237,122,38)" fg:x="2426" fg:w="38"/><text x="86.0957%" y="191.50"></text></g><g><title>UnionFind::find (38 samples, 1.34%)</title><rect x="85.8457%" y="165" width="1.3447%" height="15" fill="rgb(244,218,35)" fg:x="2426" fg:w="38"/><text x="86.0957%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="277" width="0.2477%" height="15" fill="rgb(240,68,47)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="287.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="261" width="0.2477%" height="15" fill="rgb(210,16,53)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="245" width="0.2477%" height="15" fill="rgb(235,124,12)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="229" width="0.2477%" height="15" fill="rgb(224,169,11)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="213" width="0.2477%" height="15" fill="rgb(250,166,2)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="197" width="0.2477%" height="15" fill="rgb(242,216,29)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="181" width="0.2477%" height="15" fill="rgb(230,116,27)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="165" width="0.2477%" height="15" fill="rgb(228,99,48)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="149" width="0.2477%" height="15" fill="rgb(253,11,6)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.25%)</title><rect x="87.1904%" y="133" width="0.2477%" height="15" fill="rgb(247,143,39)" fg:x="2464" fg:w="7"/><text x="87.4404%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="87.2258%" y="117" width="0.2123%" height="15" fill="rgb(236,97,10)" fg:x="2465" fg:w="6"/><text x="87.4758%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.21%)</title><rect x="87.2258%" y="101" width="0.2123%" height="15" fill="rgb(233,208,19)" fg:x="2465" fg:w="6"/><text x="87.4758%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="87.2611%" y="85" width="0.1769%" height="15" fill="rgb(216,164,2)" fg:x="2466" fg:w="5"/><text x="87.5111%" y="95.50"></text></g><g><title>chmin&lt;int, int&gt; (1 samples, 0.04%)</title><rect x="87.4381%" y="277" width="0.0354%" height="15" fill="rgb(220,129,5)" fg:x="2471" fg:w="1"/><text x="87.6881%" y="287.50"></text></g><g><title>chmin&lt;signed char, signed char&gt; (1 samples, 0.04%)</title><rect x="87.4735%" y="277" width="0.0354%" height="15" fill="rgb(242,17,10)" fg:x="2472" fg:w="1"/><text x="87.7235%" y="287.50"></text></g><g><title>std::array&lt;Move, 500ul&gt;::operator[] (9 samples, 0.32%)</title><rect x="87.5088%" y="277" width="0.3185%" height="15" fill="rgb(242,107,0)" fg:x="2473" fg:w="9"/><text x="87.7588%" y="287.50"></text></g><g><title>std::__array_traits&lt;Move, 500ul&gt;::_S_ref (9 samples, 0.32%)</title><rect x="87.5088%" y="261" width="0.3185%" height="15" fill="rgb(251,28,31)" fg:x="2473" fg:w="9"/><text x="87.7588%" y="271.50"></text></g><g><title>std::__gen_two_uniform_ints&lt;unsigned long, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (138 samples, 4.88%)</title><rect x="88.0042%" y="261" width="4.8832%" height="15" fill="rgb(233,223,10)" fg:x="2487" fg:w="138"/><text x="88.2542%" y="271.50">std::_..</text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (134 samples, 4.74%)</title><rect x="88.1458%" y="245" width="4.7417%" height="15" fill="rgb(215,21,27)" fg:x="2491" fg:w="134"/><text x="88.3958%" y="255.50">std::u..</text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (127 samples, 4.49%)</title><rect x="88.3935%" y="229" width="4.4940%" height="15" fill="rgb(232,23,21)" fg:x="2498" fg:w="127"/><text x="88.6435%" y="239.50">std::..</text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (91 samples, 3.22%)</title><rect x="89.6674%" y="213" width="3.2201%" height="15" fill="rgb(244,5,23)" fg:x="2534" fg:w="91"/><text x="89.9174%" y="223.50">std..</text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (60 samples, 2.12%)</title><rect x="90.7643%" y="197" width="2.1231%" height="15" fill="rgb(226,81,46)" fg:x="2565" fg:w="60"/><text x="91.0143%" y="207.50">s..</text></g><g><title>std::iter_swap&lt;signed char*, signed char*&gt; (37 samples, 1.31%)</title><rect x="92.8875%" y="261" width="1.3093%" height="15" fill="rgb(247,70,30)" fg:x="2625" fg:w="37"/><text x="93.1375%" y="271.50"></text></g><g><title>std::swap&lt;signed char&gt; (37 samples, 1.31%)</title><rect x="92.8875%" y="245" width="1.3093%" height="15" fill="rgb(212,68,19)" fg:x="2625" fg:w="37"/><text x="93.1375%" y="255.50"></text></g><g><title>std::shuffle&lt;signed char*, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (187 samples, 6.62%)</title><rect x="87.8273%" y="277" width="6.6171%" height="15" fill="rgb(240,187,13)" fg:x="2482" fg:w="187"/><text x="88.0773%" y="287.50">std::shuf..</text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (7 samples, 0.25%)</title><rect x="94.1967%" y="261" width="0.2477%" height="15" fill="rgb(223,113,26)" fg:x="2662" fg:w="7"/><text x="94.4467%" y="271.50"></text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (7 samples, 0.25%)</title><rect x="94.1967%" y="245" width="0.2477%" height="15" fill="rgb(206,192,2)" fg:x="2662" fg:w="7"/><text x="94.4467%" y="255.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (2 samples, 0.07%)</title><rect x="94.3737%" y="229" width="0.0708%" height="15" fill="rgb(241,108,4)" fg:x="2667" fg:w="2"/><text x="94.6237%" y="239.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (2 samples, 0.07%)</title><rect x="94.3737%" y="213" width="0.0708%" height="15" fill="rgb(247,173,49)" fg:x="2667" fg:w="2"/><text x="94.6237%" y="223.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (52 samples, 1.84%)</title><rect x="94.4444%" y="277" width="1.8401%" height="15" fill="rgb(224,114,35)" fg:x="2669" fg:w="52"/><text x="94.6944%" y="287.50">s..</text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (50 samples, 1.77%)</title><rect x="94.5152%" y="261" width="1.7693%" height="15" fill="rgb(245,159,27)" fg:x="2671" fg:w="50"/><text x="94.7652%" y="271.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (32 samples, 1.13%)</title><rect x="95.1522%" y="245" width="1.1323%" height="15" fill="rgb(245,172,44)" fg:x="2689" fg:w="32"/><text x="95.4022%" y="255.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (27 samples, 0.96%)</title><rect x="95.3291%" y="229" width="0.9554%" height="15" fill="rgb(236,23,11)" fg:x="2694" fg:w="27"/><text x="95.5791%" y="239.50"></text></g><g><title>State&lt;5, 3&gt;::RandomUpdate (2,714 samples, 96.04%)</title><rect x="0.8139%" y="293" width="96.0368%" height="15" fill="rgb(205,117,38)" fg:x="23" fg:w="2714"/><text x="1.0639%" y="303.50">State&lt;5, 3&gt;::RandomUpdate</text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (16 samples, 0.57%)</title><rect x="96.2845%" y="277" width="0.5662%" height="15" fill="rgb(237,72,25)" fg:x="2721" fg:w="16"/><text x="96.5345%" y="287.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (16 samples, 0.57%)</title><rect x="96.2845%" y="261" width="0.5662%" height="15" fill="rgb(244,70,9)" fg:x="2721" fg:w="16"/><text x="96.5345%" y="271.50"></text></g><g><title>std::__detail::_Adaptor&lt;std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;, double&gt;::operator (15 samples, 0.53%)</title><rect x="96.3199%" y="245" width="0.5308%" height="15" fill="rgb(217,125,39)" fg:x="2722" fg:w="15"/><text x="96.5699%" y="255.50"></text></g><g><title>std::generate_canonical&lt;double, 53ul, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt; &gt; (15 samples, 0.53%)</title><rect x="96.3199%" y="229" width="0.5308%" height="15" fill="rgb(235,36,10)" fg:x="2722" fg:w="15"/><text x="96.5699%" y="239.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (13 samples, 0.46%)</title><rect x="96.3907%" y="213" width="0.4600%" height="15" fill="rgb(251,123,47)" fg:x="2724" fg:w="13"/><text x="96.6407%" y="223.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (11 samples, 0.39%)</title><rect x="96.4614%" y="197" width="0.3892%" height="15" fill="rgb(221,13,13)" fg:x="2726" fg:w="11"/><text x="96.7114%" y="207.50"></text></g><g><title>Temperature&lt;5, 3&gt; (3 samples, 0.11%)</title><rect x="96.8507%" y="293" width="0.1062%" height="15" fill="rgb(238,131,9)" fg:x="2737" fg:w="3"/><text x="97.1007%" y="303.50"></text></g><g><title>MonotonicFunction (3 samples, 0.11%)</title><rect x="96.8507%" y="277" width="0.1062%" height="15" fill="rgb(211,50,8)" fg:x="2737" fg:w="3"/><text x="97.1007%" y="287.50"></text></g><g><title>MonotonicallyIncreasingFunction (2 samples, 0.07%)</title><rect x="96.8861%" y="261" width="0.0708%" height="15" fill="rgb(245,182,24)" fg:x="2738" fg:w="2"/><text x="97.1361%" y="271.50"></text></g><g><title>MonotonicallyIncreasingFunction (2 samples, 0.07%)</title><rect x="96.8861%" y="245" width="0.0708%" height="15" fill="rgb(242,14,37)" fg:x="2738" fg:w="2"/><text x="97.1361%" y="255.50"></text></g><g><title>sigmoid (1 samples, 0.04%)</title><rect x="96.9214%" y="229" width="0.0354%" height="15" fill="rgb(246,228,12)" fg:x="2739" fg:w="1"/><text x="97.1714%" y="239.50"></text></g><g><title>__GI___exp (1 samples, 0.04%)</title><rect x="96.9214%" y="213" width="0.0354%" height="15" fill="rgb(213,55,15)" fg:x="2739" fg:w="1"/><text x="97.1714%" y="223.50"></text></g><g><title>__ieee754_exp_fma (1 samples, 0.04%)</title><rect x="96.9214%" y="197" width="0.0354%" height="15" fill="rgb(209,9,3)" fg:x="2739" fg:w="1"/><text x="97.1714%" y="207.50"></text></g><g><title>[a.out] (1 samples, 0.04%)</title><rect x="96.9568%" y="277" width="0.0354%" height="15" fill="rgb(230,59,30)" fg:x="2740" fg:w="1"/><text x="97.2068%" y="287.50"></text></g><g><title>Time (2 samples, 0.07%)</title><rect x="96.9568%" y="293" width="0.0708%" height="15" fill="rgb(209,121,21)" fg:x="2740" fg:w="2"/><text x="97.2068%" y="303.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (1 samples, 0.04%)</title><rect x="96.9922%" y="277" width="0.0354%" height="15" fill="rgb(220,109,13)" fg:x="2741" fg:w="1"/><text x="97.2422%" y="287.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.04%)</title><rect x="96.9922%" y="261" width="0.0354%" height="15" fill="rgb(232,18,1)" fg:x="2741" fg:w="1"/><text x="97.2422%" y="271.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.04%)</title><rect x="96.9922%" y="245" width="0.0354%" height="15" fill="rgb(215,41,42)" fg:x="2741" fg:w="1"/><text x="97.2422%" y="255.50"></text></g><g><title>__GI___exp (3 samples, 0.11%)</title><rect x="97.0276%" y="293" width="0.1062%" height="15" fill="rgb(224,123,36)" fg:x="2742" fg:w="3"/><text x="97.2776%" y="303.50"></text></g><g><title>__ieee754_exp_fma (3 samples, 0.11%)</title><rect x="97.0276%" y="277" width="0.1062%" height="15" fill="rgb(240,125,3)" fg:x="2742" fg:w="3"/><text x="97.2776%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.53%)</title><rect x="97.1338%" y="293" width="0.5308%" height="15" fill="rgb(205,98,50)" fg:x="2745" fg:w="15"/><text x="97.3838%" y="303.50"></text></g><g><title>SolveN&lt;5, 3&gt; (2,739 samples, 96.92%)</title><rect x="0.8139%" y="309" width="96.9214%" height="15" fill="rgb(205,185,37)" fg:x="23" fg:w="2739"/><text x="1.0639%" y="319.50">SolveN&lt;5, 3&gt;</text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (2 samples, 0.07%)</title><rect x="97.6645%" y="293" width="0.0708%" height="15" fill="rgb(238,207,15)" fg:x="2760" fg:w="2"/><text x="97.9145%" y="303.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (2 samples, 0.07%)</title><rect x="97.6645%" y="277" width="0.0708%" height="15" fill="rgb(213,199,42)" fg:x="2760" fg:w="2"/><text x="97.9145%" y="287.50"></text></g><g><title>std::__detail::_Adaptor&lt;std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;, double&gt;::operator (2 samples, 0.07%)</title><rect x="97.6645%" y="261" width="0.0708%" height="15" fill="rgb(235,201,11)" fg:x="2760" fg:w="2"/><text x="97.9145%" y="271.50"></text></g><g><title>std::generate_canonical&lt;double, 53ul, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt; &gt; (2 samples, 0.07%)</title><rect x="97.6645%" y="245" width="0.0708%" height="15" fill="rgb(207,46,11)" fg:x="2760" fg:w="2"/><text x="97.9145%" y="255.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (2 samples, 0.07%)</title><rect x="97.6645%" y="229" width="0.0708%" height="15" fill="rgb(241,35,35)" fg:x="2760" fg:w="2"/><text x="97.9145%" y="239.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (2 samples, 0.07%)</title><rect x="97.6645%" y="213" width="0.0708%" height="15" fill="rgb(243,32,47)" fg:x="2760" fg:w="2"/><text x="97.9145%" y="223.50"></text></g><g><title>State&lt;5, 3&gt;::Connect (22 samples, 0.78%)</title><rect x="97.7353%" y="309" width="0.7785%" height="15" fill="rgb(247,202,23)" fg:x="2762" fg:w="22"/><text x="97.9853%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="309" width="0.0708%" height="15" fill="rgb(219,102,11)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="293" width="0.0708%" height="15" fill="rgb(243,110,44)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="277" width="0.0708%" height="15" fill="rgb(222,74,54)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="261" width="0.0708%" height="15" fill="rgb(216,99,12)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="245" width="0.0708%" height="15" fill="rgb(226,22,26)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="229" width="0.0708%" height="15" fill="rgb(217,163,10)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="213" width="0.0708%" height="15" fill="rgb(213,25,53)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="197" width="0.0708%" height="15" fill="rgb(252,105,26)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="98.5138%" y="181" width="0.0708%" height="15" fill="rgb(220,39,43)" fg:x="2784" fg:w="2"/><text x="98.7638%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.5492%" y="165" width="0.0354%" height="15" fill="rgb(229,68,48)" fg:x="2785" fg:w="1"/><text x="98.7992%" y="175.50"></text></g><g><title>__clock_gettime_2 (2 samples, 0.07%)</title><rect x="98.5846%" y="309" width="0.0708%" height="15" fill="rgb(252,8,32)" fg:x="2786" fg:w="2"/><text x="98.8346%" y="319.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.04%)</title><rect x="98.6553%" y="309" width="0.0354%" height="15" fill="rgb(223,20,43)" fg:x="2788" fg:w="1"/><text x="98.9053%" y="319.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (1 samples, 0.04%)</title><rect x="98.6907%" y="309" width="0.0354%" height="15" fill="rgb(229,81,49)" fg:x="2789" fg:w="1"/><text x="98.9407%" y="319.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (7 samples, 0.25%)</title><rect x="98.7261%" y="309" width="0.2477%" height="15" fill="rgb(236,28,36)" fg:x="2790" fg:w="7"/><text x="98.9761%" y="319.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (6 samples, 0.21%)</title><rect x="98.9738%" y="309" width="0.2123%" height="15" fill="rgb(249,185,26)" fg:x="2797" fg:w="6"/><text x="99.2238%" y="319.50"></text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (12 samples, 0.42%)</title><rect x="99.1861%" y="309" width="0.4246%" height="15" fill="rgb(249,174,33)" fg:x="2803" fg:w="12"/><text x="99.4361%" y="319.50"></text></g><g><title>[unknown] (2,794 samples, 98.87%)</title><rect x="0.8139%" y="325" width="98.8677%" height="15" fill="rgb(233,201,37)" fg:x="23" fg:w="2794"/><text x="1.0639%" y="335.50">[unknown]</text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (2 samples, 0.07%)</title><rect x="99.6108%" y="309" width="0.0708%" height="15" fill="rgb(221,78,26)" fg:x="2815" fg:w="2"/><text x="99.8608%" y="319.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.07%)</title><rect x="99.6815%" y="325" width="0.0708%" height="15" fill="rgb(250,127,30)" fg:x="2817" fg:w="2"/><text x="99.9315%" y="335.50"></text></g><g><title>_start (1 samples, 0.04%)</title><rect x="99.7523%" y="325" width="0.0354%" height="15" fill="rgb(230,49,44)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="335.50"></text></g><g><title>_dl_start (1 samples, 0.04%)</title><rect x="99.7523%" y="309" width="0.0354%" height="15" fill="rgb(229,67,23)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="319.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="99.7523%" y="293" width="0.0354%" height="15" fill="rgb(249,83,47)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="303.50"></text></g><g><title>dl_main (1 samples, 0.04%)</title><rect x="99.7523%" y="277" width="0.0354%" height="15" fill="rgb(215,43,3)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="287.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.04%)</title><rect x="99.7523%" y="261" width="0.0354%" height="15" fill="rgb(238,154,13)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7523%" y="245" width="0.0354%" height="15" fill="rgb(219,56,2)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7523%" y="229" width="0.0354%" height="15" fill="rgb(233,0,4)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7523%" y="213" width="0.0354%" height="15" fill="rgb(235,30,7)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7523%" y="197" width="0.0354%" height="15" fill="rgb(250,79,13)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7523%" y="181" width="0.0354%" height="15" fill="rgb(211,146,34)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7523%" y="165" width="0.0354%" height="15" fill="rgb(228,22,38)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7523%" y="149" width="0.0354%" height="15" fill="rgb(235,168,5)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.7523%" y="133" width="0.0354%" height="15" fill="rgb(221,155,16)" fg:x="2819" fg:w="1"/><text x="100.0023%" y="143.50"></text></g><g><title>a.out (2,821 samples, 99.82%)</title><rect x="0.0000%" y="341" width="99.8231%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="2821"/><text x="0.2500%" y="351.50">a.out</text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (1 samples, 0.04%)</title><rect x="99.7877%" y="325" width="0.0354%" height="15" fill="rgb(223,4,10)" fg:x="2820" fg:w="1"/><text x="100.0377%" y="335.50"></text></g><g><title>all (2,826 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="2826"/><text x="0.2500%" y="367.50"></text></g><g><title>perf-exec (5 samples, 0.18%)</title><rect x="99.8231%" y="341" width="0.1769%" height="15" fill="rgb(227,97,0)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="325" width="0.1769%" height="15" fill="rgb(234,150,53)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="309" width="0.1769%" height="15" fill="rgb(228,201,54)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="293" width="0.1769%" height="15" fill="rgb(222,22,37)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="277" width="0.1769%" height="15" fill="rgb(237,53,32)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="261" width="0.1769%" height="15" fill="rgb(233,25,53)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="245" width="0.1769%" height="15" fill="rgb(210,40,34)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="229" width="0.1769%" height="15" fill="rgb(241,220,44)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="213" width="0.1769%" height="15" fill="rgb(235,28,35)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="197" width="0.1769%" height="15" fill="rgb(210,56,17)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="181" width="0.1769%" height="15" fill="rgb(224,130,29)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="165" width="0.1769%" height="15" fill="rgb(235,212,8)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="149" width="0.1769%" height="15" fill="rgb(223,33,50)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="133" width="0.1769%" height="15" fill="rgb(219,149,13)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8231%" y="117" width="0.1769%" height="15" fill="rgb(250,156,29)" fg:x="2821" fg:w="5"/><text x="100.0731%" y="127.50"></text></g></svg></svg>