<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="2856"><g><title>UnionFind::find (1 samples, 0.04%)</title><rect x="0.0000%" y="309" width="0.0350%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>UnionFind::size (19 samples, 0.67%)</title><rect x="1.3655%" y="277" width="0.6653%" height="15" fill="rgb(217,0,24)" fg:x="39" fg:w="19"/><text x="1.6155%" y="287.50"></text></g><g><title>State&lt;45, 5&gt;::Connect (88 samples, 3.08%)</title><rect x="0.0350%" y="293" width="3.0812%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="88"/><text x="0.2850%" y="303.50">Sta..</text></g><g><title>UnionFind::unite (31 samples, 1.09%)</title><rect x="2.0308%" y="277" width="1.0854%" height="15" fill="rgb(248,212,6)" fg:x="58" fg:w="31"/><text x="2.2808%" y="287.50"></text></g><g><title>UnionFind::find (30 samples, 1.05%)</title><rect x="3.1162%" y="293" width="1.0504%" height="15" fill="rgb(208,68,35)" fg:x="89" fg:w="30"/><text x="3.3662%" y="303.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (2 samples, 0.07%)</title><rect x="4.1667%" y="293" width="0.0700%" height="15" fill="rgb(232,128,0)" fg:x="119" fg:w="2"/><text x="4.4167%" y="303.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (1 samples, 0.04%)</title><rect x="4.2367%" y="293" width="0.0350%" height="15" fill="rgb(207,160,47)" fg:x="121" fg:w="1"/><text x="4.4867%" y="303.50"></text></g><g><title>[[stack]] (143 samples, 5.01%)</title><rect x="0.0350%" y="309" width="5.0070%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="143"/><text x="0.2850%" y="319.50">[[stac..</text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (22 samples, 0.77%)</title><rect x="4.2717%" y="293" width="0.7703%" height="15" fill="rgb(218,30,26)" fg:x="122" fg:w="22"/><text x="4.5217%" y="303.50"></text></g><g><title>[anon] (1 samples, 0.04%)</title><rect x="5.0420%" y="309" width="0.0350%" height="15" fill="rgb(220,122,19)" fg:x="144" fg:w="1"/><text x="5.2920%" y="319.50"></text></g><g><title>std::ctype&lt;wchar_t&gt;::_M_initialize_ctype (1 samples, 0.04%)</title><rect x="5.0420%" y="293" width="0.0350%" height="15" fill="rgb(250,228,42)" fg:x="144" fg:w="1"/><text x="5.2920%" y="303.50"></text></g><g><title>Board&lt;Cell, 45, 45&gt;::operator[]&lt;signed char&gt; (30 samples, 1.05%)</title><rect x="38.0252%" y="261" width="1.0504%" height="15" fill="rgb(240,193,28)" fg:x="1086" fg:w="30"/><text x="38.2752%" y="271.50"></text></g><g><title>Move::Empty (224 samples, 7.84%)</title><rect x="39.0756%" y="261" width="7.8431%" height="15" fill="rgb(216,20,37)" fg:x="1116" fg:w="224"/><text x="39.3256%" y="271.50">Move::Empty</text></g><g><title>Move::Reset (1 samples, 0.04%)</title><rect x="46.9188%" y="261" width="0.0350%" height="15" fill="rgb(206,188,39)" fg:x="1340" fg:w="1"/><text x="47.1688%" y="271.50"></text></g><g><title>Board&lt;Cell, 45, 45&gt;::operator[]&lt;signed char&gt; (43 samples, 1.51%)</title><rect x="49.7199%" y="245" width="1.5056%" height="15" fill="rgb(217,207,13)" fg:x="1420" fg:w="43"/><text x="49.9699%" y="255.50"></text></g><g><title>State&lt;45, 5&gt;::ApplyMove (124 samples, 4.34%)</title><rect x="46.9538%" y="261" width="4.3417%" height="15" fill="rgb(231,73,38)" fg:x="1341" fg:w="124"/><text x="47.2038%" y="271.50">State..</text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="51.2255%" y="245" width="0.0700%" height="15" fill="rgb(225,20,46)" fg:x="1463" fg:w="2"/><text x="51.4755%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="51.2255%" y="229" width="0.0700%" height="15" fill="rgb(210,31,41)" fg:x="1463" fg:w="2"/><text x="51.4755%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="51.2255%" y="213" width="0.0700%" height="15" fill="rgb(221,200,47)" fg:x="1463" fg:w="2"/><text x="51.4755%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="51.2255%" y="197" width="0.0700%" height="15" fill="rgb(226,26,5)" fg:x="1463" fg:w="2"/><text x="51.4755%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="51.2255%" y="181" width="0.0700%" height="15" fill="rgb(249,33,26)" fg:x="1463" fg:w="2"/><text x="51.4755%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="51.2255%" y="165" width="0.0700%" height="15" fill="rgb(235,183,28)" fg:x="1463" fg:w="2"/><text x="51.4755%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="51.2255%" y="149" width="0.0700%" height="15" fill="rgb(221,5,38)" fg:x="1463" fg:w="2"/><text x="51.4755%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="51.2605%" y="133" width="0.0350%" height="15" fill="rgb(247,18,42)" fg:x="1464" fg:w="1"/><text x="51.5105%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="51.2605%" y="117" width="0.0350%" height="15" fill="rgb(241,131,45)" fg:x="1464" fg:w="1"/><text x="51.5105%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="51.2605%" y="101" width="0.0350%" height="15" fill="rgb(249,31,29)" fg:x="1464" fg:w="1"/><text x="51.5105%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="51.2605%" y="85" width="0.0350%" height="15" fill="rgb(225,111,53)" fg:x="1464" fg:w="1"/><text x="51.5105%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="51.2605%" y="69" width="0.0350%" height="15" fill="rgb(238,160,17)" fg:x="1464" fg:w="1"/><text x="51.5105%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="51.2605%" y="53" width="0.0350%" height="15" fill="rgb(214,148,48)" fg:x="1464" fg:w="1"/><text x="51.5105%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="51.2605%" y="37" width="0.0350%" height="15" fill="rgb(232,36,49)" fg:x="1464" fg:w="1"/><text x="51.5105%" y="47.50"></text></g><g><title>Board&lt;Cell, 45, 45&gt;::operator[]&lt;int&gt; (4 samples, 0.14%)</title><rect x="62.4300%" y="245" width="0.1401%" height="15" fill="rgb(209,103,24)" fg:x="1783" fg:w="4"/><text x="62.6800%" y="255.50"></text></g><g><title>Board&lt;Cell, 45, 45&gt;::operator[]&lt;signed char&gt; (22 samples, 0.77%)</title><rect x="62.5700%" y="245" width="0.7703%" height="15" fill="rgb(229,88,8)" fg:x="1787" fg:w="22"/><text x="62.8200%" y="255.50"></text></g><g><title>UnionFind::find (87 samples, 3.05%)</title><rect x="63.3403%" y="245" width="3.0462%" height="15" fill="rgb(213,181,19)" fg:x="1809" fg:w="87"/><text x="63.5903%" y="255.50">Uni..</text></g><g><title>UnionFind::find (36 samples, 1.26%)</title><rect x="65.1261%" y="229" width="1.2605%" height="15" fill="rgb(254,191,54)" fg:x="1860" fg:w="36"/><text x="65.3761%" y="239.50"></text></g><g><title>UnionFind::find (10 samples, 0.35%)</title><rect x="66.0364%" y="213" width="0.3501%" height="15" fill="rgb(241,83,37)" fg:x="1886" fg:w="10"/><text x="66.2864%" y="223.50"></text></g><g><title>UnionFind::find (1 samples, 0.04%)</title><rect x="66.3515%" y="197" width="0.0350%" height="15" fill="rgb(233,36,39)" fg:x="1895" fg:w="1"/><text x="66.6015%" y="207.50"></text></g><g><title>UnionFind::size (98 samples, 3.43%)</title><rect x="66.3866%" y="245" width="3.4314%" height="15" fill="rgb(226,3,54)" fg:x="1896" fg:w="98"/><text x="66.6366%" y="255.50">Uni..</text></g><g><title>UnionFind::find (73 samples, 2.56%)</title><rect x="67.2619%" y="229" width="2.5560%" height="15" fill="rgb(245,192,40)" fg:x="1921" fg:w="73"/><text x="67.5119%" y="239.50">Un..</text></g><g><title>UnionFind::find (18 samples, 0.63%)</title><rect x="69.1877%" y="213" width="0.6303%" height="15" fill="rgb(238,167,29)" fg:x="1976" fg:w="18"/><text x="69.4377%" y="223.50"></text></g><g><title>UnionFind::find (73 samples, 2.56%)</title><rect x="72.0238%" y="229" width="2.5560%" height="15" fill="rgb(232,182,51)" fg:x="2057" fg:w="73"/><text x="72.2738%" y="239.50">Un..</text></g><g><title>UnionFind::find (15 samples, 0.53%)</title><rect x="74.0546%" y="213" width="0.5252%" height="15" fill="rgb(231,60,39)" fg:x="2115" fg:w="15"/><text x="74.3046%" y="223.50"></text></g><g><title>State&lt;45, 5&gt;::Connect (670 samples, 23.46%)</title><rect x="51.2955%" y="261" width="23.4594%" height="15" fill="rgb(208,69,12)" fg:x="1465" fg:w="670"/><text x="51.5455%" y="271.50">State&lt;45, 5&gt;::Connect</text></g><g><title>UnionFind::unite (141 samples, 4.94%)</title><rect x="69.8179%" y="245" width="4.9370%" height="15" fill="rgb(235,93,37)" fg:x="1994" fg:w="141"/><text x="70.0679%" y="255.50">UnionF..</text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="74.5798%" y="229" width="0.1751%" height="15" fill="rgb(213,116,39)" fg:x="2130" fg:w="5"/><text x="74.8298%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="74.5798%" y="213" width="0.1751%" height="15" fill="rgb(222,207,29)" fg:x="2130" fg:w="5"/><text x="74.8298%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="74.5798%" y="197" width="0.1751%" height="15" fill="rgb(206,96,30)" fg:x="2130" fg:w="5"/><text x="74.8298%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="74.5798%" y="181" width="0.1751%" height="15" fill="rgb(218,138,4)" fg:x="2130" fg:w="5"/><text x="74.8298%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="74.5798%" y="165" width="0.1751%" height="15" fill="rgb(250,191,14)" fg:x="2130" fg:w="5"/><text x="74.8298%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="74.5798%" y="149" width="0.1751%" height="15" fill="rgb(239,60,40)" fg:x="2130" fg:w="5"/><text x="74.8298%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="74.5798%" y="133" width="0.1751%" height="15" fill="rgb(206,27,48)" fg:x="2130" fg:w="5"/><text x="74.8298%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="74.5798%" y="117" width="0.1751%" height="15" fill="rgb(225,35,8)" fg:x="2130" fg:w="5"/><text x="74.8298%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="74.6148%" y="101" width="0.1401%" height="15" fill="rgb(250,213,24)" fg:x="2131" fg:w="4"/><text x="74.8648%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="74.6148%" y="85" width="0.1401%" height="15" fill="rgb(247,123,22)" fg:x="2131" fg:w="4"/><text x="74.8648%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="74.6148%" y="69" width="0.1401%" height="15" fill="rgb(231,138,38)" fg:x="2131" fg:w="4"/><text x="74.8648%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="74.6148%" y="53" width="0.1401%" height="15" fill="rgb(231,145,46)" fg:x="2131" fg:w="4"/><text x="74.8648%" y="63.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="74.6148%" y="37" width="0.1401%" height="15" fill="rgb(251,118,11)" fg:x="2131" fg:w="4"/><text x="74.8648%" y="47.50"></text></g><g><title>State&lt;45, 5&gt;::Movable (67 samples, 2.35%)</title><rect x="74.7549%" y="261" width="2.3459%" height="15" fill="rgb(217,147,25)" fg:x="2135" fg:w="67"/><text x="75.0049%" y="271.50">S..</text></g><g><title>Board&lt;Cell, 45, 45&gt;::operator[]&lt;signed char&gt; (29 samples, 1.02%)</title><rect x="76.0854%" y="245" width="1.0154%" height="15" fill="rgb(247,81,37)" fg:x="2173" fg:w="29"/><text x="76.3354%" y="255.50"></text></g><g><title>UnionFind::same (78 samples, 2.73%)</title><rect x="77.1008%" y="261" width="2.7311%" height="15" fill="rgb(209,12,38)" fg:x="2202" fg:w="78"/><text x="77.3508%" y="271.50">Un..</text></g><g><title>UnionFind::find (72 samples, 2.52%)</title><rect x="77.3109%" y="245" width="2.5210%" height="15" fill="rgb(227,1,9)" fg:x="2208" fg:w="72"/><text x="77.5609%" y="255.50">Un..</text></g><g><title>UnionFind::find (54 samples, 1.89%)</title><rect x="77.9412%" y="229" width="1.8908%" height="15" fill="rgb(248,47,43)" fg:x="2226" fg:w="54"/><text x="78.1912%" y="239.50">U..</text></g><g><title>UnionFind::find (10 samples, 0.35%)</title><rect x="79.4818%" y="213" width="0.3501%" height="15" fill="rgb(221,10,30)" fg:x="2270" fg:w="10"/><text x="79.7318%" y="223.50"></text></g><g><title>UnionFind::find (1 samples, 0.04%)</title><rect x="79.7969%" y="197" width="0.0350%" height="15" fill="rgb(210,229,1)" fg:x="2279" fg:w="1"/><text x="80.0469%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.21%)</title><rect x="79.8319%" y="261" width="0.2101%" height="15" fill="rgb(222,148,37)" fg:x="2280" fg:w="6"/><text x="80.0819%" y="271.50"></text></g><g><title>__memset_avx2_unaligned_erms (3 samples, 0.11%)</title><rect x="80.0420%" y="261" width="0.1050%" height="15" fill="rgb(234,67,33)" fg:x="2286" fg:w="3"/><text x="80.2920%" y="271.50"></text></g><g><title>memset@plt (2 samples, 0.07%)</title><rect x="80.1471%" y="261" width="0.0700%" height="15" fill="rgb(247,98,35)" fg:x="2289" fg:w="2"/><text x="80.3971%" y="271.50"></text></g><g><title>std::__gen_two_uniform_ints&lt;unsigned long, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (150 samples, 5.25%)</title><rect x="80.4622%" y="245" width="5.2521%" height="15" fill="rgb(247,138,52)" fg:x="2298" fg:w="150"/><text x="80.7122%" y="255.50">std::_..</text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (142 samples, 4.97%)</title><rect x="80.7423%" y="229" width="4.9720%" height="15" fill="rgb(213,79,30)" fg:x="2306" fg:w="142"/><text x="80.9923%" y="239.50">std::u..</text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (124 samples, 4.34%)</title><rect x="81.3725%" y="213" width="4.3417%" height="15" fill="rgb(246,177,23)" fg:x="2324" fg:w="124"/><text x="81.6225%" y="223.50">std::..</text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (37 samples, 1.30%)</title><rect x="84.4188%" y="197" width="1.2955%" height="15" fill="rgb(230,62,27)" fg:x="2411" fg:w="37"/><text x="84.6688%" y="207.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (14 samples, 0.49%)</title><rect x="85.2241%" y="181" width="0.4902%" height="15" fill="rgb(216,154,8)" fg:x="2434" fg:w="14"/><text x="85.4741%" y="191.50"></text></g><g><title>std::iter_swap&lt;signed char*, signed char*&gt; (26 samples, 0.91%)</title><rect x="85.7143%" y="245" width="0.9104%" height="15" fill="rgb(244,35,45)" fg:x="2448" fg:w="26"/><text x="85.9643%" y="255.50"></text></g><g><title>std::swap&lt;signed char&gt; (26 samples, 0.91%)</title><rect x="85.7143%" y="229" width="0.9104%" height="15" fill="rgb(251,115,12)" fg:x="2448" fg:w="26"/><text x="85.9643%" y="239.50"></text></g><g><title>std::shuffle&lt;signed char*, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (188 samples, 6.58%)</title><rect x="80.2171%" y="261" width="6.5826%" height="15" fill="rgb(240,54,50)" fg:x="2291" fg:w="188"/><text x="80.4671%" y="271.50">std::shuf..</text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (5 samples, 0.18%)</title><rect x="86.6246%" y="245" width="0.1751%" height="15" fill="rgb(233,84,52)" fg:x="2474" fg:w="5"/><text x="86.8746%" y="255.50"></text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (5 samples, 0.18%)</title><rect x="86.6246%" y="229" width="0.1751%" height="15" fill="rgb(207,117,47)" fg:x="2474" fg:w="5"/><text x="86.8746%" y="239.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (6 samples, 0.21%)</title><rect x="87.1849%" y="229" width="0.2101%" height="15" fill="rgb(249,43,39)" fg:x="2490" fg:w="6"/><text x="87.4349%" y="239.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (2 samples, 0.07%)</title><rect x="87.3249%" y="213" width="0.0700%" height="15" fill="rgb(209,38,44)" fg:x="2494" fg:w="2"/><text x="87.5749%" y="223.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (19 samples, 0.67%)</title><rect x="86.7997%" y="261" width="0.6653%" height="15" fill="rgb(236,212,23)" fg:x="2479" fg:w="19"/><text x="87.0497%" y="271.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (17 samples, 0.60%)</title><rect x="86.8697%" y="245" width="0.5952%" height="15" fill="rgb(242,79,21)" fg:x="2481" fg:w="17"/><text x="87.1197%" y="255.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::param_type::a (2 samples, 0.07%)</title><rect x="87.3950%" y="229" width="0.0700%" height="15" fill="rgb(211,96,35)" fg:x="2496" fg:w="2"/><text x="87.6450%" y="239.50"></text></g><g><title>__ieee754_logl (14 samples, 0.49%)</title><rect x="87.8501%" y="181" width="0.4902%" height="15" fill="rgb(253,215,40)" fg:x="2509" fg:w="14"/><text x="88.1001%" y="191.50"></text></g><g><title>std::log (20 samples, 0.70%)</title><rect x="87.7451%" y="197" width="0.7003%" height="15" fill="rgb(211,81,21)" fg:x="2506" fg:w="20"/><text x="87.9951%" y="207.50"></text></g><g><title>__logl (3 samples, 0.11%)</title><rect x="88.3403%" y="181" width="0.1050%" height="15" fill="rgb(208,190,38)" fg:x="2523" fg:w="3"/><text x="88.5903%" y="191.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (32 samples, 1.12%)</title><rect x="87.4650%" y="261" width="1.1204%" height="15" fill="rgb(235,213,38)" fg:x="2498" fg:w="32"/><text x="87.7150%" y="271.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (32 samples, 1.12%)</title><rect x="87.4650%" y="245" width="1.1204%" height="15" fill="rgb(237,122,38)" fg:x="2498" fg:w="32"/><text x="87.7150%" y="255.50"></text></g><g><title>std::__detail::_Adaptor&lt;std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;, double&gt;::operator (32 samples, 1.12%)</title><rect x="87.4650%" y="229" width="1.1204%" height="15" fill="rgb(244,218,35)" fg:x="2498" fg:w="32"/><text x="87.7150%" y="239.50"></text></g><g><title>std::generate_canonical&lt;double, 53ul, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt; &gt; (32 samples, 1.12%)</title><rect x="87.4650%" y="213" width="1.1204%" height="15" fill="rgb(240,68,47)" fg:x="2498" fg:w="32"/><text x="87.7150%" y="223.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (4 samples, 0.14%)</title><rect x="88.4454%" y="197" width="0.1401%" height="15" fill="rgb(210,16,53)" fg:x="2526" fg:w="4"/><text x="88.6954%" y="207.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (2 samples, 0.07%)</title><rect x="88.5154%" y="181" width="0.0700%" height="15" fill="rgb(235,124,12)" fg:x="2528" fg:w="2"/><text x="88.7654%" y="191.50"></text></g><g><title>State&lt;45, 5&gt;::RandomUpdate (2,384 samples, 83.47%)</title><rect x="5.1821%" y="277" width="83.4734%" height="15" fill="rgb(224,169,11)" fg:x="148" fg:w="2384"/><text x="5.4321%" y="287.50">State&lt;45, 5&gt;::RandomUpdate</text></g><g><title>uniform_int_distribution (2 samples, 0.07%)</title><rect x="88.5854%" y="261" width="0.0700%" height="15" fill="rgb(250,166,2)" fg:x="2530" fg:w="2"/><text x="88.8354%" y="271.50"></text></g><g><title>param_type (2 samples, 0.07%)</title><rect x="88.5854%" y="245" width="0.0700%" height="15" fill="rgb(242,216,29)" fg:x="2530" fg:w="2"/><text x="88.8354%" y="255.50"></text></g><g><title>Time (2 samples, 0.07%)</title><rect x="88.6555%" y="277" width="0.0700%" height="15" fill="rgb(230,116,27)" fg:x="2532" fg:w="2"/><text x="88.9055%" y="287.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (2 samples, 0.07%)</title><rect x="88.6555%" y="261" width="0.0700%" height="15" fill="rgb(228,99,48)" fg:x="2532" fg:w="2"/><text x="88.9055%" y="271.50"></text></g><g><title>__clock_gettime_2 (2 samples, 0.07%)</title><rect x="88.6555%" y="245" width="0.0700%" height="15" fill="rgb(253,11,6)" fg:x="2532" fg:w="2"/><text x="88.9055%" y="255.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.07%)</title><rect x="88.6555%" y="229" width="0.0700%" height="15" fill="rgb(247,143,39)" fg:x="2532" fg:w="2"/><text x="88.9055%" y="239.50"></text></g><g><title>__ieee754_exp_fma (3 samples, 0.11%)</title><rect x="88.7255%" y="261" width="0.1050%" height="15" fill="rgb(236,97,10)" fg:x="2534" fg:w="3"/><text x="88.9755%" y="271.50"></text></g><g><title>__GI___exp (4 samples, 0.14%)</title><rect x="88.7255%" y="277" width="0.1401%" height="15" fill="rgb(233,208,19)" fg:x="2534" fg:w="4"/><text x="88.9755%" y="287.50"></text></g><g><title>xflow (1 samples, 0.04%)</title><rect x="88.8305%" y="261" width="0.0350%" height="15" fill="rgb(216,164,2)" fg:x="2537" fg:w="1"/><text x="89.0805%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.63%)</title><rect x="88.8655%" y="277" width="0.6303%" height="15" fill="rgb(220,129,5)" fg:x="2538" fg:w="18"/><text x="89.1155%" y="287.50"></text></g><g><title>__ieee754_logl (7 samples, 0.25%)</title><rect x="89.7409%" y="197" width="0.2451%" height="15" fill="rgb(242,17,10)" fg:x="2563" fg:w="7"/><text x="89.9909%" y="207.50"></text></g><g><title>SolveN&lt;45, 5&gt; (2,428 samples, 85.01%)</title><rect x="5.0770%" y="293" width="85.0140%" height="15" fill="rgb(242,107,0)" fg:x="145" fg:w="2428"/><text x="5.3270%" y="303.50">SolveN&lt;45, 5&gt;</text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (17 samples, 0.60%)</title><rect x="89.4958%" y="277" width="0.5952%" height="15" fill="rgb(251,28,31)" fg:x="2556" fg:w="17"/><text x="89.7458%" y="287.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::operator (17 samples, 0.60%)</title><rect x="89.4958%" y="261" width="0.5952%" height="15" fill="rgb(233,223,10)" fg:x="2556" fg:w="17"/><text x="89.7458%" y="271.50"></text></g><g><title>std::__detail::_Adaptor&lt;std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;, double&gt;::operator (17 samples, 0.60%)</title><rect x="89.4958%" y="245" width="0.5952%" height="15" fill="rgb(215,21,27)" fg:x="2556" fg:w="17"/><text x="89.7458%" y="255.50"></text></g><g><title>std::generate_canonical&lt;double, 53ul, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt; &gt; (17 samples, 0.60%)</title><rect x="89.4958%" y="229" width="0.5952%" height="15" fill="rgb(232,23,21)" fg:x="2556" fg:w="17"/><text x="89.7458%" y="239.50"></text></g><g><title>std::log (12 samples, 0.42%)</title><rect x="89.6709%" y="213" width="0.4202%" height="15" fill="rgb(244,5,23)" fg:x="2561" fg:w="12"/><text x="89.9209%" y="223.50"></text></g><g><title>__logl (3 samples, 0.11%)</title><rect x="89.9860%" y="197" width="0.1050%" height="15" fill="rgb(226,81,46)" fg:x="2570" fg:w="3"/><text x="90.2360%" y="207.50"></text></g><g><title>State&lt;45, 5&gt;::Connect (32 samples, 1.12%)</title><rect x="90.0910%" y="293" width="1.1204%" height="15" fill="rgb(247,70,30)" fg:x="2573" fg:w="32"/><text x="90.3410%" y="303.50"></text></g><g><title>UnionFind::find (222 samples, 7.77%)</title><rect x="91.2115%" y="293" width="7.7731%" height="15" fill="rgb(212,68,19)" fg:x="2605" fg:w="222"/><text x="91.4615%" y="303.50">UnionFind::..</text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="293" width="0.0350%" height="15" fill="rgb(240,187,13)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="277" width="0.0350%" height="15" fill="rgb(223,113,26)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="261" width="0.0350%" height="15" fill="rgb(206,192,2)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="245" width="0.0350%" height="15" fill="rgb(241,108,4)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="229" width="0.0350%" height="15" fill="rgb(247,173,49)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="213" width="0.0350%" height="15" fill="rgb(224,114,35)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="197" width="0.0350%" height="15" fill="rgb(245,159,27)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="181" width="0.0350%" height="15" fill="rgb(245,172,44)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="165" width="0.0350%" height="15" fill="rgb(236,23,11)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="149" width="0.0350%" height="15" fill="rgb(205,117,38)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="133" width="0.0350%" height="15" fill="rgb(237,72,25)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="117" width="0.0350%" height="15" fill="rgb(244,70,9)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="101" width="0.0350%" height="15" fill="rgb(217,125,39)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="85" width="0.0350%" height="15" fill="rgb(235,36,10)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="69" width="0.0350%" height="15" fill="rgb(251,123,47)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="53" width="0.0350%" height="15" fill="rgb(221,13,13)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="98.9846%" y="37" width="0.0350%" height="15" fill="rgb(238,131,9)" fg:x="2827" fg:w="1"/><text x="99.2346%" y="47.50"></text></g><g><title>__ieee754_logl (1 samples, 0.04%)</title><rect x="99.0196%" y="293" width="0.0350%" height="15" fill="rgb(211,50,8)" fg:x="2828" fg:w="1"/><text x="99.2696%" y="303.50"></text></g><g><title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (1 samples, 0.04%)</title><rect x="99.0546%" y="293" width="0.0350%" height="15" fill="rgb(245,182,24)" fg:x="2829" fg:w="1"/><text x="99.3046%" y="303.50"></text></g><g><title>std::uniform_int_distribution&lt;int&gt;::operator (5 samples, 0.18%)</title><rect x="99.0896%" y="293" width="0.1751%" height="15" fill="rgb(242,14,37)" fg:x="2830" fg:w="5"/><text x="99.3396%" y="303.50"></text></g><g><title>[unknown] (2,705 samples, 94.71%)</title><rect x="5.0770%" y="309" width="94.7129%" height="15" fill="rgb(246,228,12)" fg:x="145" fg:w="2705"/><text x="5.3270%" y="319.50">[unknown]</text></g><g><title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (15 samples, 0.53%)</title><rect x="99.2647%" y="293" width="0.5252%" height="15" fill="rgb(213,55,15)" fg:x="2835" fg:w="15"/><text x="99.5147%" y="303.50"></text></g><g><title>a.out (2,851 samples, 99.82%)</title><rect x="0.0000%" y="325" width="99.8249%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="2851"/><text x="0.2500%" y="335.50">a.out</text></g><g><title>_start (1 samples, 0.04%)</title><rect x="99.7899%" y="309" width="0.0350%" height="15" fill="rgb(230,59,30)" fg:x="2850" fg:w="1"/><text x="100.0399%" y="319.50"></text></g><g><title>__libc_start_main (1 samples, 0.04%)</title><rect x="99.7899%" y="293" width="0.0350%" height="15" fill="rgb(209,121,21)" fg:x="2850" fg:w="1"/><text x="100.0399%" y="303.50"></text></g><g><title>__GI_exit (1 samples, 0.04%)</title><rect x="99.7899%" y="277" width="0.0350%" height="15" fill="rgb(220,109,13)" fg:x="2850" fg:w="1"/><text x="100.0399%" y="287.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.04%)</title><rect x="99.7899%" y="261" width="0.0350%" height="15" fill="rgb(232,18,1)" fg:x="2850" fg:w="1"/><text x="100.0399%" y="271.50"></text></g><g><title>all (2,856 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="2856"/><text x="0.2500%" y="351.50"></text></g><g><title>perf-exec (5 samples, 0.18%)</title><rect x="99.8249%" y="325" width="0.1751%" height="15" fill="rgb(224,123,36)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="309" width="0.1751%" height="15" fill="rgb(240,125,3)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="293" width="0.1751%" height="15" fill="rgb(205,98,50)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="277" width="0.1751%" height="15" fill="rgb(205,185,37)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="261" width="0.1751%" height="15" fill="rgb(238,207,15)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="245" width="0.1751%" height="15" fill="rgb(213,199,42)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="229" width="0.1751%" height="15" fill="rgb(235,201,11)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="213" width="0.1751%" height="15" fill="rgb(207,46,11)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="197" width="0.1751%" height="15" fill="rgb(241,35,35)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="181" width="0.1751%" height="15" fill="rgb(243,32,47)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="165" width="0.1751%" height="15" fill="rgb(247,202,23)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="149" width="0.1751%" height="15" fill="rgb(219,102,11)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="133" width="0.1751%" height="15" fill="rgb(243,110,44)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="117" width="0.1751%" height="15" fill="rgb(222,74,54)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8249%" y="101" width="0.1751%" height="15" fill="rgb(216,99,12)" fg:x="2851" fg:w="5"/><text x="100.0749%" y="111.50"></text></g></svg></svg>